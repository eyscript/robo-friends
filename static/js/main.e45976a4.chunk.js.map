{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","action.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","CardList","robots","map","user","i","key","SearchBox","onChange","type","placeholder","Scroll","console","log","style","overflowY","border","height","children","App","onClick","e","this","onRequestRobots","searchField","onSearchChange","isPending","filteredrobots","filter","robot","toLowerCase","includes","React","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e45976a4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card=(props)=>{\r\n \r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 '>\r\n\t\t\t<img alt='robots'   src={`https://robohash.org/${props.id}?200x200`}/>\r\n\t\t\t<div>\r\n\r\n\t\t\t<h2>  {props.id} {props.name}</h2>\r\n\t\t\t<p> {props.email}</p>\r\n\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t);\r\n\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from '../components/Card';\r\n\r\nconst CardList=(props)=>{\r\nreturn(\r\n\t<div>\r\n\t\t{\r\n\t\tprops.robots.map((user,i)=>{\r\n\t\treturn <Card key={props.robots[i].id} id={props.robots[i].id} name={props.robots[i].name} email={props.robots[i].email}/>\r\n\t   })\r\n\t\t}\r\n\t</div>\r\n\t);\t\t \r\n\r\n\t}\r\n\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox=({onChange})=>{\r\n\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t<input className='pa3 ba b--green bg-lightest-blue' type=\"search\" placeholder=\"search robots\" onChange={onChange}/>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport CardList from './CardList';\r\n\r\n\r\nconst Scroll=(props)=>{\r\n\tconsole.log(props)\r\n\treturn (\r\n\t<div style={{overflowY:'scroll', border:'5px solid black', height:'800px'}}>\r\n\t{props.children}\r\n\t</div>\r\n\t\t);\r\n}\r\nexport default Scroll;","import React from 'react';\r\nimport CardList from '../components/CardList';\r\n//import {robots} from './robots';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport {connect} from 'react-redux';\r\nimport {SetSearchField, requestRobots} from '../action.js'\r\n\r\nconst mapStateToProps=(state)=>{\r\n\tconsole.log(state)\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField, \r\n\t\trobots: state.requestRobots.robots,\t\t\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\t}\r\n}\r\nconst mapDispatchToProps=(dispatch)=>{\r\nreturn {\r\n\r\nonSearchChange: (event)=>dispatch(SetSearchField(event.target.value)),\r\nonRequestRobots:()=>dispatch(requestRobots())\r\n\r\n}\r\n}\r\nclass App extends React.Component{\r\n\r\n\r\nonClick=(e)=>{\r\n\tconsole.log(e)\r\n}\r\ncomponentDidMount(){\r\nthis.props.onRequestRobots();\r\n}\r\n\r\n\r\n\trender(){\r\nconst {searchField, onSearchChange, robots, isPending}=this.props;\r\n\t\tconst filteredrobots=this.props.robots.filter((robot, i)=>{\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t})\r\n\t\treturn(\r\n\t\t<div className='tc'>\r\n\t\t\t<h1>RoboFriends</h1>\r\n\t\t\t<SearchBox onChange={onSearchChange} onClick={this.onClick}/>\r\n\t\t\t<Scroll>\r\n\t\t\t{(isPending)?<h2>Loading</h2>:<CardList robots={filteredrobots}/>}\r\n\t\t\t</Scroll>\r\n\t\t</div>\r\n\t\t)\r\n}\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {CHANGE_SEARCH_FIELD,\r\nREQUEST_ROBOTS_PENDING,REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants.js'\r\n\texport const SetSearchField=(text)=>({\r\n\ttype:CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n\t})\r\nexport const requestRobots=()=>(dispatch)=>{\r\n\tdispatch({type: REQUEST_ROBOTS_PENDING});\r\n\tfetch( `http://jsonplaceholder.typicode.com/users`)\r\n\t.then((response)=> {\r\n    return response.json();\r\n  })\r\n  .then(data=>dispatch({type:REQUEST_ROBOTS_SUCCESS, payload:data}))\r\n  .catch(error=>dispatch({type:REQUEST_ROBOTS_FAILED, payload:error}))\r\n}","export const CHANGE_SEARCH_FIELD='CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING='REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS='REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED='REQUEST_ROBOTS_FAILED';\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED} from './constants.js';\r\nconst initialStateSearch={\r\n\tsearchField:''\r\n}\r\nexport const searchRobots=(state=initialStateSearch, action={})=>{\r\nconsole.log(state)\r\nswitch(action.type){\r\ncase CHANGE_SEARCH_FIELD:\r\n    return Object.assign({}, state, {searchField:action.payload});\r\n    \r\n default:\r\n        return state;\r\n    }\r\n    console.log(state)\r\n}\r\n\r\nconst initialStateRobots={\r\n    isPending:true,\r\n    error:'',\r\n    robots:[]\r\n}\r\nexport const requestRobots=(state=initialStateRobots, action={})=>{\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending: true})\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {isPending:false, robots:action.payload})\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {isPending:false, error:action.payload})\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider, connect} from 'react-redux';\nimport './index.css';\nimport 'tachyons';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { searchRobots, requestRobots } from './reducers';\nimport  {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\nconst logger=createLogger();\nconst rootReducer=combineReducers({searchRobots, requestRobots});\nconst store= createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(<Provider store={store}>\n\t\t\t\t\t<App />\n\t\t\t\t</Provider>\n\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}